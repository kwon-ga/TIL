>cookies ?

쿠키란 ? 
쿠키를 사용해서 서버는 내 브라우저에 데이터를 넣을 수 있다 !!
간단한 예시를 들어보면,
1. 특정 웹사이트 언어 설정을 변경
2. 서버에서 언어 설정이 들어간 쿠키를 브라우저에 전달
3. 웹사이트 재방문 시 쿠키+요청을 보낸다.
4. 서버에서는 쿠키에 저장된 정보를 바탕으로 내가 선택한 언어 설정 페이지를 제공 !!

단, 쿠키는 도메인에 따라 제한되며 유효기간이 있다 (서버가 지정한 기간)



>stateless ?

서버로 가는 요청이 이전 리퀘스트와 독립적으로 다뤄지는,
서버에 client와 server의 동작, 상태정보를 저장하지 않는 형태
이 말은 곧 요청을 할 때마다. 내가 누군지 알려줘야함 !! 
그래서 사용할 수 있는게 session 임 !

>session ?

예를들어 나는 어떤 페이지에 로그인을 하려고 한다 !
1. kwonga라는 id로 로그인을 한다.
2. 유저명 + 비밀번호를 서버에 보낸다.
3. 비밀번호가 맞다면, 서버는 세션 db에 'kwonga'라는 유저를 생성한다.
*-해당 세션에는 별도의 id가 있다.*
4. 해당 세션 id는 쿠키를 통해 브라우저로 돌아오고 저장된다.
*-이제 같은 웹사이트에 다른 페이지로 이동하게 된다면 브라우저는 세션 id를 갖고있는 쿠키를 서버에 보낸다.*
5. 서버에서는 들어오는 세션 id가 저장된 쿠키를 확인하고, 그 세션 id로 세션 db를 확인한다.

이후 4-5번 프로세스 반복 반복..
중요한 유저 정보는 모두 서버에 있다. 유저가 가진 정보는 세션id뿐
쿠키는 세션 id를 전달하는 수단으로 사용된다.

그러면 쿠키가 없는 네이티브 앱 (Native App) 은 쿠키가 없는데 ?
이런 경우는 토큰을 사용한다!

>tokens ?

토큰은 그냥 이상하게 생긴 string 이다 ..
서버에 토큰을 보내고 세선 db에서 토큰과 일치하는 유저를 찾는다.


>JWT ? (Json Web Token)


세션은 요청이 있을 때마다. db 조회 작업이 필수인데 ...

JWT는 토큰 형식이다.
서버에서 유저 인증을 한다고 db 작업을 하지 않아도 된다!
로그인을 하면 서버에서는 유저 인증에 필요한 정보를 가져다가 문자열로 만들어서 유저에게 전달한다.
세션은 공간의 제한이 있으나 jwt는 제한이 없다. 즉 db작업 대신 문자열로 만들어서 전달하는게 끝.
로그인 시, 토큰을 서버에 보내서 해당 토큰이 유효한지 체크하고 유효한다면 인증이 끝난다.

jwt는 암호화 된 정보가 아니다. 
즉 누구나 해독해서 컨텐츠를 볼 수 있다는 뜻 

