Session
 서버에 부담이 크다.
 매 요청마다 db에 요청을 해야함

Cookie
 클라이언트 측에서 위변조가 가능하다.


JWT (Json Web Token)
 서버의 부담을 크게 덜어줌
 암호화된 토큰을 사용해 안전한 통신 가능
 토큰 발행 전용 서버를 개설해 서버의 부담 완화 가능
 토큰에 특정 권한을 심을 수 있음

 1.access token 
  사용자 정보에 접근

 2.refresh token
  Access token 갱신 용도
 
 구조 
 {header}.{payload}.{signature}
 - header : 토큰 타입 지정 / 알고리즘 명시
 - payload : 토큰에 권한 부여, 사용자 정보를 선택해서 담을 수 있다.

 절차
 1. 사용자 로그인 요청
 2. 서버에서 암호화된 토큰 생성
 3. 사용자는 토큰을 저장(cookie, state 등)
 4. 이 후 모든 요청에 토큰을 태워 요청함
 5. 서버는 토큰을 가지고 사용자 식별



모듈 pyjwt​ - jwt 인코딩/디코딩
pip install flask-jwt-extended

"identity": 해당 토큰의 고유성을 식별하기 위한 정보 (서버는 해당 토큰을 요청받은 후, 
토큰 내에 있는 이 identity값을 통해 사용자를 식별하기 때문에 고유한 값이 필요하다. 단, 
클라이언트 단에서 계속 유지되는 정보이기 때문에 비밀번호를 비롯한 중요 개인정보는 
identity로 지정하는 것은 지양하길 바란다.

​

"expires_delta": 해당 토큰의 만료일자 (토큰이 유효하게 사용될 수 있는 만료기간을 설정할 수 있다. 
필자의 경우, 실습을 위해 False를 입력하여 유효기간을 무기한으로 설정해주었다)

​