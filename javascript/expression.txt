표현식과 문

값은 식(표현식)이 평가되어 생성된 결과를 말한다.
평가란 식을 해석해서 값을 생성하거나 참조하는 것을 의미한다.

5.1 
리터럴 : 리터럴(literal)d은 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법을 말한다.

*리터럴의 종류
정수 리터럴		= 30
부동소수점 리터럴 	= 10.5
문자열 리터럴		= 'hello', "world!"
불리언 리터럴 		= true, false
null 리터럴		= null
undefined 리터럴	= undefined
객체 리터럴 		= { name:'lee', age:30}
배열 리터럴		= [ 1, 2, 3, 4]
함수 리터럴 		=function () {}
등등..



5.2
표현식 : 표현식은 값으로 평가될 수 있는 문이다. 즉 표현식이 평가되면 새로운 값을 생성시키거나 기존 값을 참조한다.

표현식의 종류
-리터럴 표현식 		= 10 , 'hello'
-식별자 표현식		= sum, person.name, arr[1]
-연산자 표현식		= 10+20, sum = 19, sum !== 10
-함수/메서드 호출 표현식= find(), person.getName()

값으로 평가될 수 있는 문은 모두 표현식이다.
표현식은 값으로 평가된다, 이때 표현식과 표현식이 평가된 값은 동등한 관계, 즉 동치이다.



5.3
명령문 : 문은 프로그램을 구성하는 기본 단위이자 최소 실행 단위이다.
명령문은 여러 토큰으로 구성된다. 

토큰 : 문법적인 의미를 가지며, 문법적으로 더 이상 나눌 수 없는 코드의 기본 요소를 의미한다.
예를들면 키워드, 식별자, 연산자, 시터럴, 세미콜론이나 마침표 등의 특수기호는 문법적인 의미를 가지며, 문법적으로 더 이상 나눌 수 없는 코드의 기본 요소이므로 모두 토큰이다.

토큰 	토큰	토큰	토큰	토큰	토큰	토큰
var 	sum	=	1	+	2	;
ㅣㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅣ -> 명령문



5.4
세미콜론의 의 : 명령문의 종료를 나타낸다. 단 중괄호로 묶은 코드 블록( {...} ) 뒤에는 세미콜론을 붙이지 않는다. 또한 자바스크립트 엔진이 소스코드를 해석할 때 명령문의 끝을 예측하여 세미콜론을 자동으로 붙여주는 세미콜론 자동 삽입 기능이 암묵적으로 수행되기 때문에 생략이 가능하나 생각하지 못한 오류를 범할 수 있다.



5.5
표현식과 명령문
표현식은 명령문의 일부일 수도 있고 표현식 자체로 명령문이 될 수 있다.

표현식과 명령문을 구별하는 가장 간단하고 명료한 방법은 변수에 할당해보는 것
*개발자 도구에서 명령문을 실행하면 undefined를 출력하고 표현식을 실행하면 값을 출력한다.

*var x = 100; -> undefined (명령문)
* x + 10 -> 110 (표현식)
















